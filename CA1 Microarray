#Group:Liu Yu, Du Kefan
#Importing processed microarray data into R from GEO
library(GEOquery)
gse50737 <- getGEO('GSE50737')
length(gse50737)

#get ExpressionSet
class(gse50737[[1]])
gse50737 <- gse50737[[1]]

#getting the raw data for the series
library(oligo)
library(oligoClasses)

#I don't have an awsome connection, so I download it from GEO database
wd <- file.path("/Users/zlana/Desktop/GSE50737")

#use oligoClass to read CEL data
gse50737_celdata <- read.celfiles(list.celfiles(wd,full.names=TRUE,listGzipped=TRUE))

#get a pseudo-image of the chip intensities
image(gse50737_celdata[,1])

#find the variables of interest
library(tidyverse)
varLabels(gse50737)

#the variables of interest are "tissue:ch1" and "treatment:ch1"
#the sample accessions are in "geo_accession"
gse50737$supplementary_file

#use pData to get phenotype data
pd <- pData(gse50737)
pd['cel_file'] <- str_split(pd$supplementary_file,"/") %>% map_chr(tail,1)

#re-read out CEL files to guarantee that they are in the correct order as the experimental data we have from getGEO
gse50737_celdata <- read.celfiles(paste0('/Users/zlana/Desktop/GSE50737/',pd$cel_file),phenoData=phenoData(gse50737))

#gotten the treatment conditions attached
pData(gse50737_celdata)[,c("geo_accession","tissue:ch1","treatment:ch1")]

#performs RMA normalisation
gse50737_eset <- rma(gse50737_celdata)

library(dplyr)
pd <- pData(gse50737_eset)
pd <- rename(pd,tissue="tissue:ch1",treatment="treatment:ch1")

#convert into factor
pd$treatment <- as.factor(pd$treatment)

#set levels of the factor
levels(pd$treatment) <- c("Benzene exposed","Benzene poisoning","Control")

#create a design representing the different treatments
library(limma)
design <- model.matrix(~ 0 + pd$treatment)
colnames(design) <- levels(pd$treatment)
design

#make contrasts between three treatments
contrasts_matrix <- makeContrasts(poisoning_with_exposed=Benzene.poisoning - Benzene.exposed,
                                  poisoning_with_control=Benzene.poisoning - Control,
                                  exposed_with_control=Benzene.exposed - Control,
                                  levels=design)

#fits a linear model for every row of expression matrix
gse50737_fit <- lmFit(gse50737_eset,design)
gse50737_fit2 <- contrasts.fit(gse50737_fit,contrasts=contrasts_matrix)

#borrows information about the distribution across genes to calculate a robust test statistic
gse50737_fit2 <- eBayes(gse50737_fit2)

#returns which tested features of an array pass the test criteria
summary(decideTests(gse50737_fit2,lfc=1))

#vocanoplot of the first contrast(Benzene.poisoning - Benzene.exposed)
interesting_genes_1 <- topTable(gse50737_fit2,number=Inf,p.value = 0.05,lfc=1)
volcanoplot(gse50737_fit2, coef=1, main=sprintf("%d features pass our cutoffs",nrow(interesting_genes_1)))
points(interesting_genes_1[['poisoning_with_exposed']]),-log10(interesting_genes_1[['P.Value']]),col='red')

#vocanoplot of the second contrast(Benzene.poisoning - Control)
interesting_genes_2 <- topTable(gse50737_fit2,number=Inf,p.value = 0.05,lfc=1)
volcanoplot(gse50737_fit2, coef=2, main=sprintf("%d features pass our cutoffs",nrow(interesting_genes_2)))
points(interesting_genes_2[['poisoning_with_exposed']]),-log10(interesting_genes_2[['P.Value']]),col='red')

#vocanoplot of the third contrast(Benzene.exposed - Control)
interesting_genes_3 <- topTable(gse50737_fit2,number=Inf,p.value = 0.05,lfc=1)
volcanoplot(gse50737_fit2, coef=3, main=sprintf("%d features pass our cutoffs",nrow(interesting_genes_3)))
points(interesting_genes_3[['poisoning_with_exposed']]),-log10(interesting_genes_3[['P.Value']]),col='red')

#heatmap
eset_of_interest <- gse50737_eset[rownames(interesting_genes),]
library(RColorBrewer)
heatmap(exprs(eset_of_interest),
        labCol=gse50737_eset[['treatment:ch1']] ,labRow=NA,
        col       = rev(brewer.pal(10, "RdBu")),
        distfun   = function(x) as.dist(1-cor(t(x))))

#gene annotation
#There is no annotation package for this dataset so we need to match the probe and gene
BiocManager::install("org.Hs.eg.db")
library(org.Hs.eg.db)

#discover which keytypes can be passed in to select or keys as the keytype argument
keytypes(org.Hs.eg.db)
gpl <- getGEO('GPL16686', destdir=".")

#GPL annotation format
anno=gpl@dataTable@table

#extract gene ID and GB_ACC
probe2symbol=anno[,c(1,6)]
probe2symbol=probe2symbol[probe2symbol[,2]!="",]
gene_bridge=AnnotationDbi::select(org.Hs.eg.db, keys=probe2symbol[,2], 
                                  columns=c("SYMBOL"), #target format
                                  keytype="ACCNUM") #current format
#match GB_ACC to symbol
probe2symbol=dplyr::left_join(probe2symbol,gene_bridge,by=c("GB_ACC"="ACCNUM"))
probe2symbol=probe2symbol[,-2]
colnames(probe2symbol)=c("ID","Symbol")

#remove unmatched cases
probe2symbol=probe2symbol[!(probe2symbol[,2] %in% c("",NA,"---")),]

#results of difference analysis
ps <- topTable(gse50737_fit2,number=Inf,p.value = 0.05,lfc=1)
deg <- data.frame(Probe=rownames(ps),
                  poisoning_with_exposed_logFC=ps[,"poisoning_with_exposed"],
                  poisoning_with_control_logFC=ps[,"poisoning_with_control"],
                  exposed_with_control_logFC=ps[,"exposed_with_control"],
                  P.Value=ps[,"P.Value"],FDR=ps[,"adj.P.Val"])
                  
#annotating gene symbols combined with GPL platform information
deg=dplyr::left_join(deg,probe2symbol[,-3],by=c("Probe"="ID"))
deg=na.omit(deg)
rownames(deg)=1:nrow(deg)

##benzene_poisoning-control comparison
interesting_genes_1[['ID']]=rownames(interesting_genes_1)
interesting_genes_1 <- dplyr::inner_join(probe2symbol,interesting_genes_1,by="ID")
upregulated_1 <- interesting_genes_1[interesting_genes_1$logFC>0,]
downregulated_1 <- interesting_genes_1[interesting_genes_1$logFC<0,]
write_excel_csv(upregulated_1 ,"upregulated_interesting_genes_1.csv")
write_excel_csv(downregulated_1 ,"downregulated_interesting_genes_1.csv")
##benzene_poisoning-benzene_exposed comparison
interesting_genes_3[['ID']]=rownames(interesting_genes_3)
interesting_genes_3 <- dplyr::inner_join(probe2symbol,interesting_genes_3,by="ID")
upregulated_3 <- interesting_genes_3[interesting_genes_3$logFC>0,]
downregulated_3 <- interesting_genes_3[interesting_genes_3$logFC<0,]
write_excel_csv(upregulated_3 ,"upregulated_interesting_genes_3.csv")
write_excel_csv(downregulated_3 ,"downregulated_interesting_genes_3.csv")
